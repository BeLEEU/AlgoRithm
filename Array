977. 有序数组的平方
给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。

示例 1： 输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]

示例 2： 输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]
思路: 首先能想到的是作平方后，对数组进行一次排序，返回排序后的数组，这种方法的时间复杂度是nlogn；仔细观察可发现其实数组是有序的，因为在未作平方前是按照非递减排序，所以平方后数值的大小是按照
V字形排列的，因此可以利用双指针的方法（类似归并排序的核心算法），依次取到较大的数值插入到数组的头部
/**
 * @param {number[]} nums
 * @return {number[]}
 */
var sortedSquares = function(nums) {
    let newNums = nums.map((elem) => {
        return elem * elem;
    });
    let res = [];
    let left = 0;
    let right = newNums.length - 1;
    while(left <= right) {
        if(newNums[left] > newNums[right]) {
            res.unshift(newNums[left])
            left++;
        } else {
            res.unshift(newNums[right])
            right--;
        }
    }
    return res;
};

27. 移除元素
给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]

思路：同样可以用比较暴力的双循环对数组进行排序返回非目标数值的数组部分；比较快的方法是利用快慢指针，快慢指针都从索引0处开始遍历，当快指针指向的数值不是目标数值的时候，快慢指针一起
向前移动，并且将快指针指向的值先赋予慢指针指向的位置。当快指针指向的数值是目标数值的时候，慢指针不动，快指针移动，直至快指针指向的数值不是目标数值。
/**
 * @param {number[]} nums
 * @param {number} val
 * @return {number}
 */
var removeElement = function(nums, val) {
    let slowIndex = 0;
    for(let fastIndex = 0; fastIndex < nums.length; fastIndex++) {
        if(val != nums[fastIndex]) {
            nums[slowIndex++] = nums[fastIndex];
        }
    }
    return slowIndex;
};

704. 二分查找
给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。

输入: nums = [-1,0,3,5,9,12], target = 9     
输出: 4       
解释: 9 出现在 nums 中并且下标为 4
思路：注意区间闭合问题就好
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function(nums, target) {
    let left = 0;
    let right = nums.length - 1;
    let mid;
    while(left <= right) {
        mid = left + (right - left) // 2;
        if(nums[mid] === target) {
            return mid;
        } 
        if(target > nums[mid]) {
            left = mid + 1;
        } else if(target < nums[mid]) {
            right = mid - 1;
        }
    }
    return -1;

};
